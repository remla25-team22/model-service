name: Auto Tag, Build, Test & Release Model Service

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version from VERSION.txt
        id: version
        run: |
          VERSION=$(cat VERSION.txt)
          if [[ -z "$VERSION" ]]; then
            echo "VERSION.txt is empty. Aborting."
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          VERSION_CLEANED="${VERSION#v}"
          echo "VERSION_CLEANED=$VERSION_CLEANED" >> $GITHUB_ENV
          echo "Current version: $VERSION"

      - name: Tag release if not exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.VERSION }}"; then
            echo "Tag already exists. Skipping release."
            exit 0
          fi
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Set image name
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}"
          IMAGE="${IMAGE,,}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build and push multi-arch Docker image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $IMAGE:${{ env.VERSION_CLEANED }} \
            --push .

      - name: Test container with MODEL_TAG
        run: |
          docker run -d --name model-test -e MODEL_TAG=${{ env.VERSION_CLEANED }} -p 8080:8080 $IMAGE:${{ env.VERSION_CLEANED }}
          
          echo "Waiting for server to start..."
          for i in {1..15}; do
            if curl -s http://localhost:8080/ > /dev/null; then
              echo "Server is up!"
              break
            fi
            echo "Waiting ($i)..."
            sleep 2
          done
      
          echo "Sending test request..."
          curl -X POST http://localhost:8080/ -H "Content-Type: application/json" -d '{"text": "I love this!"}' || true
      
          echo "=== CONTAINER LOGS ==="
          docker logs model-test || true
      
          docker stop model-test
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump to next patch pre-release version
        run: |
          VERSION=${{ env.VERSION }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "${VERSION#v}"
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}-pre"
          echo "$NEXT_VERSION" > VERSION.txt
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Commit and push version bump
        run: |
          git add VERSION.txt
          git commit -m "Bump version to ${{ env.NEXT_VERSION }} after release ${{ env.VERSION }}"
          git push origin main || echo "Push to main failed (possibly protected branch)."
